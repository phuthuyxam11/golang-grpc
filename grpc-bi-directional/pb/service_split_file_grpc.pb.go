// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service_split_file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SplitFileServiceClient is the client API for SplitFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SplitFileServiceClient interface {
	SplitFile(ctx context.Context, opts ...grpc.CallOption) (SplitFileService_SplitFileClient, error)
}

type splitFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSplitFileServiceClient(cc grpc.ClientConnInterface) SplitFileServiceClient {
	return &splitFileServiceClient{cc}
}

func (c *splitFileServiceClient) SplitFile(ctx context.Context, opts ...grpc.CallOption) (SplitFileService_SplitFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SplitFileService_ServiceDesc.Streams[0], "/pb.SplitFileService/SplitFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &splitFileServiceSplitFileClient{stream}
	return x, nil
}

type SplitFileService_SplitFileClient interface {
	Send(*SplitFileRequest) error
	Recv() (*SplitFileResponse, error)
	grpc.ClientStream
}

type splitFileServiceSplitFileClient struct {
	grpc.ClientStream
}

func (x *splitFileServiceSplitFileClient) Send(m *SplitFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *splitFileServiceSplitFileClient) Recv() (*SplitFileResponse, error) {
	m := new(SplitFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SplitFileServiceServer is the server API for SplitFileService service.
// All implementations must embed UnimplementedSplitFileServiceServer
// for forward compatibility
type SplitFileServiceServer interface {
	SplitFile(SplitFileService_SplitFileServer) error
	mustEmbedUnimplementedSplitFileServiceServer()
}

// UnimplementedSplitFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSplitFileServiceServer struct {
}

func (UnimplementedSplitFileServiceServer) SplitFile(SplitFileService_SplitFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SplitFile not implemented")
}
func (UnimplementedSplitFileServiceServer) mustEmbedUnimplementedSplitFileServiceServer() {}

// UnsafeSplitFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SplitFileServiceServer will
// result in compilation errors.
type UnsafeSplitFileServiceServer interface {
	mustEmbedUnimplementedSplitFileServiceServer()
}

func RegisterSplitFileServiceServer(s grpc.ServiceRegistrar, srv SplitFileServiceServer) {
	s.RegisterService(&SplitFileService_ServiceDesc, srv)
}

func _SplitFileService_SplitFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SplitFileServiceServer).SplitFile(&splitFileServiceSplitFileServer{stream})
}

type SplitFileService_SplitFileServer interface {
	Send(*SplitFileResponse) error
	Recv() (*SplitFileRequest, error)
	grpc.ServerStream
}

type splitFileServiceSplitFileServer struct {
	grpc.ServerStream
}

func (x *splitFileServiceSplitFileServer) Send(m *SplitFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *splitFileServiceSplitFileServer) Recv() (*SplitFileRequest, error) {
	m := new(SplitFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SplitFileService_ServiceDesc is the grpc.ServiceDesc for SplitFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SplitFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SplitFileService",
	HandlerType: (*SplitFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SplitFile",
			Handler:       _SplitFileService_SplitFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_split_file.proto",
}
